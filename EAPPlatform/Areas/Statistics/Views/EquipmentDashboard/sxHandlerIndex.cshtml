<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="/layui/css/layui.css" media="all">
    <style>
        .fixed-row {
            position: sticky;
            top: 0;
            z-index: 999;
        }
    </style>
</head>
<body>
    <div class="fixed-row">
        <form class="layui-form layui-form-pane" action="">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">日期</label>
                    <div class="layui-input-inline">
                        <input type="text" class="layui-input" id="datepick">
                    </div>
                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">设备</label>
                    <div class="layui-input-inline">
                        <div id="prodselect" class="xm-select-demo"></div>
                    </div>
                </div>
                <div class="layui-inline">
                   <button type="button" class="layui-btn" onclick="DownloadReport()">下载报表</button>
                </div>
            </div>
        </form>
    </div>
    <div class="layui-collapse">
        <div class="layui-colla-item">
            <h2 class="layui-colla-title">Alarm Statistics</h2>
            <div class="layui-colla-content layui-show">
                <table class="layui-hide" id="robotalarmdatatable" lay-filter="robotalarmdatatable"></table>
            </div>
        </div>
        <div class="layui-colla-item">
            <h2 class="layui-colla-title">Alarm Chart</h2>
            <div class="layui-colla-content layui-show">
                <div id="RobotAlarmMTTAChart" style=" width: 90%; height: 500px; margin: auto; margin-top: 3%;"></div>
                <div id="RobotAlarmMTBAChart" style=" width: 90%; height: 500px; margin: auto; margin-top: 3%;"></div>
                <div id="RobotAlarmJAMChart" style=" width: 90%; height: 500px; margin: auto; margin-top: 3%;"></div>
                <div id="RobotAlarmParamChart" style=" width: 90%; height: 500px; margin: auto; margin-top: 3%;"></div>
                <div id="RobotAlarmCountTrendChart" style=" width: 90%; height: 500px; margin: auto; margin-top: 3%;"></div>

            </div>
        </div>
    </div>
    <script type="text/html" id="robotalarmtoolbar">
        <a class="layui-btn layui-btn layui-btn-xs" lay-event="robotalarmdetails">Details</a>
    </script>

    <div id="report-div" style="display:none;margin-top:20px">
    <form class="layui-form" id="report-form" action="" method="post" lay-filter="downloadfilter">
        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">开始日期</label>
                <div class="layui-input-inline">
                    <input type="text" autocomplete="off" id="starttime" class="layui-input" placeholder="开始日期">
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">结束日期</label>
                <div class="layui-input-inline">
                    <input type="text" autocomplete="off" id="endtime" class="layui-input" placeholder="结束日期">
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">工作天数</label>
            <div class="layui-input-inline">
                <input type="text" autocomplete="off" class="layui-input" id="workday">
            </div>
            <div class="layui-input-inline" style="padding-top:10px">
                天
            </div>
        </div>
    </form>
</div>

    <script src="/jquery.min.js"></script>
    <script src="/echarts/echarts.min.js"></script>
    <script src="/layui/layui.js"></script>
    <script src="/layui/xm-select.js"></script>

    <script>
        //var pc = new RTCPeerConnection();
        //pc.createDataChannel("");
        //pc.createOffer().then(function (offer) {
        //    console.log(offer);
        //    var regex = /(\d+\.\d+\.\d+\.\d+)/g;
        //    var match = regex.exec(offer.sdp);
        //    var ip = match[1];
        //    console.log("用户的 IP 地址为：" + ip);
        //});


        var strprod ;
        $("#datepick").val("@DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd")");

        layui.use(['layer', 'table', 'form', 'upload', 'laydate', 'element','layer'], function () {
            var layer = layui.layer
                , table = layui.table
                , form = layui.form
                , laydate = layui.laydate
                , element = layui.element
                , layer = layui.layer;

            laydate.render({
                elem: '#datepick',
                min: -100,
                max: -1,
                done: function (value, date, endDate) {
                    // console.log(value); //得到日期生成的值，如：2017-08-18
                    //console.log(date); //得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0}
                    //console.log(endDate); //得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。
                    ReloadAll();
                }
            });

            //日期范围
            laydate.render({
                elem: '#starttime',
                min: -100,
                max: -1
            });

            laydate.render({
                elem: '#endtime',
                min: -100,
                max: -1
            });

            var prodselect = xmSelect.render({
                el: '#prodselect',
                filterable: true,
                model: {
                    label: {
                        type: 'block',
                        block: {
                            //最大显示数量, 0:不限制
                            showCount: 1,
                            //是否显示删除图标
                            showIcon: false,
                        }
                    }
                },
                toolbar: {
                    show: true,
                    list: ['ALL', 'CLEAR']
                },
                on: function (data) {
                    //arr:  当前多选已选中的数据
                    var arr = data.arr;
                    //change, 此次选择变化的数据,数组
                    var change = data.change;
                    //isAdd, 此次操作是新增还是删除
                    var isAdd = data.isAdd;
                    localStorage.setItem('cachelinegroups', JSON.stringify(arr));
                    ReloadAll("change", arr);
                },
            });

            getData();
            var robotalarmdatatable;
            async function getData() {
                try {
                    let result1 = await $.ajax({
                        type: 'post',
                        dataType: 'json',
                        url: '/Statistics/EquipmentDashboard/GetEquipments',
                        success: function (data) {
                            //console.log(data.data);
                            prodselect.update({
                                data: data.data,
                            });

                            var str = localStorage.getItem('cachelinegroups');
                            if (str !== null) {
                                var json = JSON.parse(str);
                                prodselect.setValue(json);
                            }
                        },
                        error: function () {
                        }
                    });
                    //处理返回的数据，并继续执行下一个 Ajax 请求

                    robotalarmdatatable = table.render({
                        elem: '#robotalarmdatatable'
                        , url: '/Statistics/EquipmentDashboard/GetAlarmTableData'
                        , height: 'full'
                        , toolbar: true
                        , defaultToolbar: ['filter', 'exports', 'print']
                        , editTrigger: 'dblclick'
                        , totalRow: true
                        , cols: [[
                            { field: 'Date', title: 'Date', sort: true }
                            ,{ field: 'AlarmType', title: 'JAMType', sort: true }
                            , { field: 'TotalSeconds', title: 'StopTime(s)', sort: true, totalRow: true }
                            , { field: 'TotalCount', title: 'Jam Count', sort: true, totalRow: true }
                            // , { field: 'StandbySeconds', title: 'StandbyTime', sort: true, totalRow: true }
                            , { fixed: 'right', width: 180, align: 'center', toolbar: '#robotalarmtoolbar' }
                        ]],
                        where: {
                            date: $("#datepick").val(),
                            strprod: prodselect.getValue('valueStr')
                        }
                    });

                    var filterprod = prodselect.getValue('value');
                    ReloadAlarmTrendChart(filterprod);

                } catch (error) {
                    //处理错误
                }
            }

            table.on('tool(robotalarmdatatable)', function (obj) {
                var event = obj.event, //当前单元格事件属性值
                    selectdata = obj.data;
                strprod = JSON.stringify(prodselect.getValue('value'));

                if (event === 'robotalarmdetails') {

                    layer.open({
                        type: 2,
                        title: "Details",
                        closeBtn: false,
                        shift: 2,
                        area: ['80%', '85%'],
                        shadeClose: true,
                        content: 'sxHandlerDetails?date=' + selectdata.Date + '&alarmtype=' + selectdata.AlarmType,
                        success: function (layero, index) {

                        },
                        yes: function () {

                        }
                    });
                }

            });


            function ReloadAll(flag, arr) {
                var filterprod = prodselect.getValue('value');//on的时候选项未改变
                if (flag == "change") {
                    filterprod = arr.map(item => item.value);
                }
                ReloadAlarmTable(filterprod);
                ReloadAlarmTrendChart(filterprod);
            }

            function ReloadAlarmTable(filterprod) {
                var str = filterprod.join(",");

                table.reload('robotalarmdatatable', {
                    url: '/Statistics/EquipmentDashboard/GetAlarmTableData',
                    where: {
                        date: $("#datepick").val(),
                        strprod: str
                    }
                });
            }

            function ReloadAlarmTrendChart(filterprod) {

                $.ajax({
                    type: 'post',
                    dataType: 'json',
                    data: {
                        date: $("#datepick").val(),
                        strprod: filterprod
                    },
                    url: '/Statistics/EquipmentDashboard/GetAlarmChartData',

                    success: function (data) {

                        var dates = getDistinctValue(data.data, 'Date');
                        dates.sort();

                        var alarmtypes = getDistinctValues(data.data, ['AlarmType']);
                        //var timeseries = [];
                        var countseries = [];
                        var legend = [];
                        alarmtypes.forEach(function (currentValue, index, array) {
                            legend.push(currentValue[0]);
                            var temp = findElements(data.data, ['AlarmType'], currentValue);
                            //var timesubdata = [];
                            var countsubdata = [];
                            //var prevTotalTime = 0;
                            //var prevTotalCount = 0;
                            dates.forEach(function (cv) {

                                var dayoutput = findElements(temp, ['Date'], [cv]);
                                //console.log(dayoutput);
                                if (dayoutput.length == 0) {
                                    //timesubdata.push(0);
                                    countsubdata.push(0);
                                } else {
                                    //var totalTime = dayoutput[0].TotalSeconds;
                                    var totalCount = dayoutput[0].TotalCount;
                                    //timesubdata.push(totalTime);
                                    countsubdata.push(totalCount);

                                    //totalTime += prevTotalTime;
                                    //totalCount += prevTotalCount;
                                    //prevTotalTime = totalTime;
                                    //prevTotalCount = totalCount;

                                }
                            });

                            //var subdata = getDistinctValue(findElements(sumobyproddata, ['LINE', 'GROUP_NAME'], currentValue), 'INPUT');

                            //var timeitem = {
                            //    name: currentValue[0],
                            //    type: 'bar',
                            //    stack: '',
                            //    emphasis: {
                            //        focus: 'series'
                            //    },
                            //    data: timesubdata

                            //};
                            //timeseries.push(timeitem);

                            var countitem = {
                                name: currentValue[0],
                                type: 'bar',
                                stack: '',
                                emphasis: {
                                    focus: 'series'
                                },
                                data: countsubdata
                            };
                            countseries.push(countitem);

                        })
                        
                        // var dates_other = getDistinctValue(data.handlerdata, 'Date');
                        // dates_other.sort();
                        // var mttaseries = [];
                        // var mtbaseries = [];
                        // var jamseries = [];
                        // var equipments = getDistinctValues(data.handlerdata, ['EQNAME']);
                        // equipments.forEach(function (currentValue, index, array) {
                            
                        //     var temp_other = findElements(data.handlerdata, ['EQNAME'], currentValue);
                        //     var mttasubdata = [];
                        //     var mtbasubdata = [];
                        //     var jamsubdata = [];
                        //     dates_other.forEach(function (cv) {

                        //         var daydata = findElements(temp_other, ['Date'], [cv]);
                        //         if (daydata.length == 0) {
                        //             mttasubdata.push(0);
                        //             mtbasubdata.push(0);
                        //             jamsubdata.push(0);
                        //         } else {
                        //             var mtta = daydata[0].MTTA;
                        //             mttasubdata.push(mtta);
                        //             var mtba = daydata[0].MTBA;
                        //             mtbasubdata.push(mtba);
                        //             var jam = daydata[0].JAM;
                        //             jamsubdata.push(jam);
                        //         }
                        //     });

                        //     var mttaitem = {
                        //         name: currentValue[0],
                        //         type: 'bar',
                        //         stack: '',
                        //         emphasis: {
                        //             focus: 'series'
                        //         },
                        //         markLine: {
                        //             data: [{
                        //                 yAxis: 26,
                        //                 silent: true,
                        //                 lineStyle: {
                        //                     color: '#92D050'
                        //                 },
                        //             }]
                        //         },
                        //         data: mttasubdata
                        //     };
                        //     mttaseries.push(mttaitem);

                        //     var mtbaitem = {
                        //         name: currentValue[0],
                        //         type: 'bar',
                        //         stack: '',
                        //         emphasis: {
                        //             focus: 'series'
                        //         },
                        //         markLine: {
                        //             data: [{
                        //                 yAxis: 3.9,
                        //                 silent: true,
                        //                 lineStyle: {
                        //                     color: '#92D050'
                        //                 },
                        //             }]
                        //         },
                        //         data: mtbasubdata
                        //     };
                        //     mtbaseries.push(mtbaitem);

                        //     var jamitem = {
                        //         name: currentValue[0],
                        //         type: 'bar',
                        //         stack: '',
                        //         emphasis: {
                        //             focus: 'series'
                        //         },
                        //         markLine: {
                        //             data: [{
                        //                 yAxis: 5000,
                        //                 silent: true,
                        //                 lineStyle: {
                        //                     color: '#92D050'
                        //                 },
                        //             }]
                        //         },
                        //         data: jamsubdata
                        //     };
                        //     jamseries.push(jamitem);
                        // })

                        var dates_other = getDistinctValue(data.keyparamsdata, 'Date');
                        dates_other.sort();
                        var keyparamseries = [];
                        var keyparamlegend = [];
                        var paramtypes = getDistinctValues(data.keyparamsdata, ['AlarmType']);
                        paramtypes.forEach(function (currentValue, index, array) {
                            keyparamlegend.push(currentValue[0]);
                            var temp_other = findElements(data.keyparamsdata, ['AlarmType'], currentValue);
                            var keyparamdata = [];
                            dates_other.forEach(function (cv) {

                                var daydata = findElements(temp_other, ['Date'], [cv]);
                                if (daydata.length == 0) {
                                    keyparamdata.push(0);
                                } else {
                                    var value = daydata[0].Value;
                                    keyparamdata.push(value);
                                }
                            });

                            var keyparamitem = {
                                name: currentValue[0],
                                type: 'bar',
                                stack: '',
                                emphasis: {
                                    focus: 'series'
                                },
                                data: keyparamdata
                            };
                            keyparamseries.push(keyparamitem);

                        })

                        var equipments = data.handlerdata.Equipments;
                        var mttadata = data.handlerdata.MTTAData;
                        var mtbadata = data.handlerdata.MTBAData;
                        var jamdata = data.handlerdata.JAMData;

                        SetRobotAlarmChart("RobotAlarmMTTAChart", equipments, 'MTTA', 26, mttadata);
                        SetRobotAlarmChart("RobotAlarmMTBAChart", equipments, 'MTBA', 3.9, mtbadata);
                        SetRobotAlarmChart("RobotAlarmJAMChart", equipments, '1/JAM', 5000, jamdata);
                        // SetHandlerAlarmChart("RobotAlarmMTTAChart", dates_other, mttaseries);
                        // SetHandlerAlarmChart("RobotAlarmMTBAChart", dates_other, mtbaseries);
                        // SetHandlerAlarmChart("RobotAlarmJAMChart", dates_other, jamseries);
                        SetRobotAlarmCountTrendChart('RobotAlarmParamChart', dates_other, keyparamlegend, keyparamseries);
                        SetRobotAlarmCountTrendChart('RobotAlarmCountTrendChart', dates, legend, countseries);
                    },
                    error: function () {
                    }
                })

            }

            function SetRobotAlarmChart(id, xAixsdata, legendtitle, target, seriesdata) {
               var myChart1 = echarts.init(document.getElementById(id));
                myChart1.clear();


                var option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            label: {
                                backgroundColor: '#6a7985'
                            }
                        }
                    },
                    legend: {
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                            magicType: {
                                show: true,
                                type: ['stack'],
                                label: {
                                    show: true,
                                    position: 'top'
                                }
                            }
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            show: true,
                            type: 'category',
                            boundaryGap: false,
                            data: xAixsdata,
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: [{
                        data: seriesdata,
                        type: 'bar',
                        itemStyle: {
                            color: '#83bff6'
                        },
                        name: legendtitle,
                        markLine: {
                            data: [{
                                yAxis: target,
                                silent: true,
                                lineStyle: {
                                    color: '#92D050'
                                },
                            }]
                        }
                    }]
                };


                myChart1.setOption(option);
                window.addEventListener("resize", function () {
                    myChart1.resize();
                });
            }

            function SetRobotAlarmCountTrendChart(id, xAixsdata, legenddata, seriesdata) {
                var myChart2 = echarts.init(document.getElementById(id));
                myChart2.clear();


                var option = {
                    //title: {
                    //    text: 'OutputByGroupLineTrendChart'
                    //},
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            label: {
                                backgroundColor: '#6a7985'
                            }
                        }
                    },
                    legend: {
                        data: legenddata,
                        selected: {
                            "Not JAM": false,
                        }
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                            magicType: {
                                show: true,
                                type: ['stack']
                            }
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            type: 'category',
                            boundaryGap: false,
                            data: xAixsdata,

                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: seriesdata
                };
                /*   */
                // 使用刚指定的配置项和数据显示图表。
                myChart2.setOption(option);
                window.addEventListener("resize", function () {
                    myChart2.resize();
                });
            }

            function SetHandlerAlarmChart(id, xAixsdata, seriesdata) {
                var myChart3 = echarts.init(document.getElementById(id));
                myChart3.clear();

                var option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            label: {
                                backgroundColor: '#6a7985'
                            }
                        }
                    },
                    legend: {
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                            magicType: {
                                show: true,
                                type: ['stack']
                            }
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        top: '18%',
                        bottom: '8%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            type: 'category',
                            boundaryGap: false,
                            data: xAixsdata,

                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    dataZoom: [
                        {
                            show: true,
                            start: 0,
                            end: 100
                        },
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        }
                    ],
                    series: seriesdata
                };

                myChart3.setOption(option);
                window.addEventListener("resize", function () {
                    myChart3.resize();
                });
            }

        });

        function DownloadReport() {
            
            layui.layer.open({
                type: 1,
                title: "选择日期范围",
                closeBtn: 1,
                shift: 2,
                area: ['40%', '50%'],
                content: $("#report-div"),
                btn:["确定"],
                success: function (layero, index) {
                    $("#starttime").val("");
                    $("#endtime").val("");
                    $("#workday").val("");
                },
                yes: function(index, layero) {

                    var startday = $("#starttime").val();
                    var endday = $("#endtime").val();
                    var workday = $("#workday").val();

                    if (startday != "" && endday != "" && workday != "") {
                        if (/^\d{1,}$/.test(workday)) {
                            var url = "/Statistics/EquipmentDashboard/ExportReport?startday=" + startday + "&endday=" + endday + "&workday=" + workday;
                            //window.open(url, "_blank");
                            window.location = url;
                        }
                        else {
                            layui.layer.msg('<em style="color:black;font-style:normal;font-weight:normal">工作天数必须填整数天数！</em>', { icon: 5 });
                            return false;
                        }
                    }
                    else {
                        layui.layer.msg('<em style="color:black;font-style:normal;font-weight:normal">不能为空！</em>', { icon: 5 });
                        return false;
                    }

                    layui.layer.close(index);
                },
                end: function (index, layero) {
                    $("#report-div").css("display", "none");
                }
            });

        }
    </script>
    <script>

        Date.prototype.Format = function (fmt) { //author: meizz
            var o = {
                "M+": this.getMonth() + 1, //月份
                "d+": this.getDate(), //日
                "h+": this.getHours(), //小时
                "m+": this.getMinutes(), //分
                "s+": this.getSeconds(), //秒
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度
                "S": this.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        }

        function getDistinctValue(arr, field) {
            const values = new Set();
            for (const item of arr) {
                values.add(item[field]);
            }
            return Array.from(values);
        }
        function getDistinctValues(arr, fields) {
            const values = new Set();
            for (const item of arr) {
                const groupValue = fields.map(field => item[field]).join(',');
                values.add(groupValue);
            }
            //return Array.from(values);
            return Array.from(values).map(groupValue => groupValue.split(','));
        }

        //找到数组中所有filed字段等于value的元素
        function findElements(arr, fields, values) {
            return arr.filter(element =>
                fields.every((field, index) => element[field] === values[index])
            );
        }
    </script>
</body>

</html>